########################################################################
############### LIBRAIRIE DES REQUÊTES PGSQL/POSTGIS ###################
########################################################################

###
#0# Initialisation de la classification
###

# Transformation de l'ensemble des multipolygones en simples polygones et une correction des geométries ##

CREATE TABLE sgts_veg AS
    SELECT ST_MAKEVALID((ST_DUMP(segmentation_veg.geom)).geom::geometry(Polygon,2154)) as geom, segmentation_veg._mnh1media as mnh1, segmentation_veg._mnh2media as mnh2, segmentation_veg._txtmedian as txt
    FROM segmentation_veg;

# Ajout de l'attribut STRATE ##

ALTER TABLE sgts_veg ADD strate varchar(100);

###
#1# Première étape de classification avec des règles de texture et de hauteur
###

#classification v1 en prenant en classant aussi avec la hauteur la strate arbustive
UPDATE sgts_veg SET strate = 'arbore' WHERE sgts_veg.txt  < 11 AND sgts_veg.mnh1  > 3;
UPDATE sgts_veg SET strate = 'arbustif' WHERE sgts_veg.txt  < 11 AND  sgts_veg.mnh1 > 1 AND sgts_veg.mnh1 <= 3;
UPDATE sgts_veg SET strate = 'herbace' WHERE sgts_veg.txt  < 11 AND  sgts_veg.mnh1  <= 1;
UPDATE sgts_veg SET strate = 'herbace' WHERE sgts_veg.txt  >= 11;

#classification v2 en ne prenant pas en compte la hauteur pour la strate herbace
UPDATE sgts_veg SET strate = 'arbore' WHERE sgts_veg.txt  < 11 AND sgts_veg.mnh1  > 3;
UPDATE sgts_veg SET strate = 'arbustif ' WHERE sgts_veg.txt  < 11 AND sgts_veg.mnh1 <= 3;
UPDATE sgts_veg SET strate = 'herbace' WHERE sgts_veg.txt  >= 11;

#creation d'un nouvel identifiant unique pour chaque entité
ALTER TABLE sgts_veg ADD COLUMN fid SERIAL PRIMARY key;

#creation d'un index spatial sur l'attribut GEOM
CREATE INDEX idx_sgts_veg ON sgts_veg USING gist(geom);

###
#2# Traitement des segments arbustifs
###

# 0 # Extraction de deux catégories de segments arbustifs : les segments "isolés" (ne touchant pas d'autres segments) et les segments de "regroupement"

# Création table "rgpt_arbuste" (geom) contenant les polygones des regroupements de segments arbustifs aux géométries valides
CREATE TABLE rgpt_arbuste AS
    SELECT ST_MAKEVALID((ST_DUMP(ST_UNION(t_arbu.geom))).geom) AS geom
    FROM (SELECT geom FROM sgts_veg WHERE strate='arbustif') AS t_arbu);

# rgpt_arbuste(geom, fid)
ALTER TABLE rgpt_arbuste ADD COLUMN fid serial PRIMARY key;

# Ajout index spatial
CREATE INDEX idx_rgpt_arbuste ON rgpt_arbuste USING gist(geom);

# rgpt_arbuste(geom,fid,nb_sgt)
ALTER TABLE rgpt_arbuste ADD COLUMN nb_sgt int;

# Mise à jour de rgpt_arbuste(nb_sgt) : compte le nombre de segments arbustifs qui composent le regroupement
UPDATE rgpt_arbuste SET nb_sgt = sgt_dans_rgpt.compteur FROM (SELECT rgpt_arbuste.fid , count(*) AS compteur
                                                              FROM rgpt_arbuste, (SELECT sgts_veg.fid AS fid, sgts_veg.geom AS geom FROM sgts_veg WHERE strate='arbustif') AS t_arbu
                                                            WHERE ST_COVEREDBY(t_arbu.geom, ST_BUFFER(rgpt_arbuste.geom,0.5))
                                                            GROUP BY rgpt_arbuste.fid) AS sgt_dans_rgpt
                                                            WHERE rgpt_arbuste.fid = sgt_dans_rgpt.fid;

# Création table "arbuste_asso_rgpt"(fid, geom, fid_rgpt) associe à chaque segment arbustif l'identifiant du regroupement auquel il appartient
CREATE TABLE arbuste_asso_rgpt AS
    SELECT DISTINCT t_arbu.fid, t_arbu.geom, rgpt_arbuste.fid AS fid_rgpt
    FROM rgpt_arbuste, (SELECT sgts_veg.fid, sgts_veg.geom FROM sgts_veg WHERE strate='arbustif') AS t_arbu
    WHERE ST_COVEREDBY(t_arbu.geom, st_buffer(rgpt_arbuste.geom,0.5)));

# Création index spatial
CREATE INDEX idx_arbuste_asso_rgpt ON arbuste_asso_rgpt USING gist(geom);

# Création table "arbuste_uniq"(fid, geom, fid_rgpt) correspondant aux arbustes "isolés" qui ne touchent aucun autre segment arbustif
CREATE TABLE arbuste_uniq AS
    SELECT t_arbu.fid, t_arbu.geom, arbu_rgpt.fid_rgpt AS fid_rgpt
                        FROM (SELECT sgts_veg.fid, sgts_veg.geom FROM sgts_veg WHERE strate='arbustif') AS t_arbu,
                             (SELECT arbuste_asso_rgpt.fid, arbuste_asso_rgpt.fid_rgpt
								FROM (SELECT rgpt_arbuste.fid FROM rgpt_arbuste WHERE rgpt_arbuste.nb_sgt<=1) as rgpt, 
								arbuste_asso_rgpt
								WHERE arbuste_asso_rgpt.fid_rgpt = rgpt.fid) as arbu_rgpt
                        WHERE t_arbu.fid = arbu_rgpt.fid);

# Création index spatial
CREATE INDEX idx_arbuste_uniq on arbuste_uniq using gist(geom);

#
CREATE TABLE arbu_de_rgpt AS 
	SELECT t_arbu.fid, t_arbu.geom, arbu_rgpt.fid_rgpt AS fid_rgpt
                        FROM (SELECT sgts_veg.fid, sgts_veg.geom FROM sgts_veg WHERE strate='arbustif') AS t_arbu,
                             (SELECT arbuste_asso_rgpt.fid, arbuste_asso_rgpt.fid_rgpt
								FROM (SELECT rgpt_arbuste.fid FROM rgpt_arbuste WHERE rgpt_arbuste.nb_sgt>1) as rgpt, 
								arbuste_asso_rgpt
								WHERE arbuste_asso_rgpt.fid_rgpt = rgpt.fid) as arbu_rgpt
                        WHERE t_arbu.fid = arbu_rgpt.fid);

# 1 # Reclassification des segments arbustifs "isolés"

##A. Reclassification de tous les segments arbustes isolés entourés de segments arborés et/ou de "vide"

# Table contenant les identifiants des segments arbustifs isolés, la longueur de sa frontière et la longueur de sa frontière en contact avec segments arborés
CREATE TABLE arbu_isole_touch_arbo AS 
	SELECT arbuste_uniq.fid, arbuste_uniq.geom, st_perimeter(arbuste_uniq.geom) AS long_bound_arbu, long_arbu_front_arbo.long_bound_inters_arbo AS long_bound_inters_arbo
	FROM (SELECT bound.fid, SUM(ST_LENGHT(bound.geom_bound_inters_arbo)) AS long_bound_inters_arbo 
			FROM (SELECT arbuste.fid, arbuste.geom, arbre.fid_arbo, ST_INTERSECTION(ST_BOUNDARY(arbuste.geom),ST_INTERSECTION(arbuste.geom, arbre.geom)) AS geom_bound_inters_arbo 
					FROM (SELECT DISTINCT arbuste_uniq.fid, arbuste_uniq.geom
							FROM (SELECT DISTINCT arbuste_uniq.fid 
									FROM (SELECT geom FROM sgts_veg WHERE strate = 'herbace') AS herbe, arbuste_uniq
									WHERE ST_INTERSECTS(herbe.geom, arbuste_uniq.geom)) AS arbuste_touch_herbe, arbuste_uniq
							WHERE arbuste_uniq.fid != arbuste_touche_arbre.fid) AS arbuste, 
						 (SELECT geom FROM sgts_veg WHERE strate='arbore') AS arbre
					 WHERE ST_INTERSECTS(arbuste.geom, arbre.geom)) AS bound
			GROUP BY bound.fid) AS long_arbu_front_arbo, arbuste_uniq 
	WHERE arbuste_uniq.fid = long_arbu_front_arbo.fid);

# Reclassification des segments "arbustifs" en classe "arbore" entourés UNIQUEMENT d'arboré (frontière en contact avec arboré = frontière totale du segment)
UPDATE sgts_veg SET strate = 'arbore' FROM (
											SELECT arbu_isole_touch_arbo.fid
											FROM arbu_isole_touch_arbo 
											WHERE arbu_isole_touch_arbo.long_bound_inters_arbo = arbu_isole_touch_arbo.long_bound_arbu) AS arbuste_entoure_arbre 
									  WHERE sgts_veg.fid = arbuste_entoure_arbre.fid ;

# Reclassification du segment "arbustif" en classe "arbore" ou suppression du segment s'il est entouré d'arboré ET de vide

#si la différence de hauteur entre le segment arbustif et les segments arborés est inférieure ou égale à 1m --> reclassification en 'arbore'
UPDATE sgts_veg SET strate = 'arbore' FROM (SELECT arbuste.fid FROM (SELECT sgts_veg.* 
																			FROM (
																					SELECT arbu_isole_touch_arbo.fid, arbu_isole_touch_arbo.geom  
																					FROM arbu_isole_touch_arbo 
																					WHERE arbu_isole_touch_arbo.long_bound_inters_arbo < arbu_isole_touch_arbo.long_bound_arbu) as arbuste,
																				  sgts_veg
																			WHERE sgts_veg.fid = arbuste.fid) AS arbuste
																		  (SELECT * FROM sgts_veg WHERE strate = 'arbore') AS arbre
																	WHERE ST_INTERSECTS(arbuste.geom, arbre.geom) AND abs(arbuste.mnh-arbre.mnh)<=1 
																	GROUP BY arbuste.fid) AS arbu_recla
										   WHERE sgts_veg.fid = arbu_recla.fid;

#si la différence de hauteur entre le segment arbustif et les segments arborés est supérieure stricte à 1m --> suppression
DELETE FROM sgts_veg USING (SELECT arbuste.fid FROM (SELECT sgts_veg.* 
														FROM (
															SELECT arbu_isole_touch_arbo.fid, arbu_isole_touch_arbo.geom  
															FROM arbu_isole_touch_arbo 
															WHERE arbu_isole_touch_arbo.long_bound_inters_arbo < arbu_isole_touch_arbo.long_bound_arbu) as arbuste,
															sgts_veg
														WHERE sgts_veg.fid = arbuste.fid) AS arbuste
													(SELECT * FROM sgts_veg WHERE strate = 'arbore') AS arbre
													WHERE ST_INTERSECTS(arbuste.geom, arbre.geom) AND abs(arbuste.mnh-arbre.mnh)>1 
													GROUP BY arbuste.fid) AS non_arbu
										   WHERE sgts_veg.fid = non_arbu.fid;


##B. Reclassification de tous les segments arbustifs isolés entourés de segments arborés ET herbacés

# Table contenant les identifiants des segments arbustifs isolés, la longueur de sa frontière et la longueur de sa frontière en contact avec segments herbacés
CREATE TABLE arbu_isole_touch_herb AS 
	SELECT arbuste_uniq.fid, arbuste_uniq.geom, st_perimeter(arbuste_uniq.geom) AS long_bound_arbu, long_arbu_front_herb.long_bound_inters_arbo AS long_bound_inters_arbo
	FROM (SELECT bound.fid, SUM(ST_LENGHT(bound.geom_bound_inters_arbo)) AS long_bound_inters_arbo 
			FROM (SELECT arbuste.fid, arbuste.geom, herbe.fid_herbe, ST_INTERSECTION(ST_BOUNDARY(arbuste.geom),ST_INTERSECTION(arbuste.geom, herbe.geom)) AS geom_bound_inters_herbe 
					FROM (SELECT DISTINCT arbuste_uniq.fid, arbuste_uniq.geom
							FROM (SELECT DISTINCT arbuste_uniq.fid 
									FROM (SELECT geom FROM sgts_veg WHERE strate = 'arbore') AS arbre, arbuste_uniq
									WHERE ST_INTERSECTS(arbre.geom, arbuste_uniq.geom)) AS arbuste_touch_arbre, arbuste_uniq
							WHERE arbuste_uniq.fid != arbuste_touche_arbre.fid) AS arbuste, 
						 (SELECT geom FROM sgts_veg WHERE strate='herbace') AS herbe
					 WHERE ST_INTERSECTS(arbuste.geom, herbe.geom)) AS bound
			GROUP BY bound.fid) AS long_arbu_front_herbe, arbuste_uniq 
	WHERE arbuste_uniq.fid = long_arbu_front_herbe.fid);

# Création de la table ne contenant que les arbustes qui touchent à la fois de l'arboré et de l'herbacé
CREATE TABLE arbu_touch_herb_arbo AS (
	SELECT arbuste_uniq.* 
	FROM arbuste_uniq, (SELECT fid 
						FROM arbu_isole_touch_arbo 
						UNION
						SELECT fid 
						FROM arbu_isole_touch_herb) AS touch_only 
	WHERE arbuste_uniq.fid != touch_only.fid)

# Création de la table "matable" contenant l'identifiant du segment arboré ou herbacé avec lequel le segment arbustif intersecte 
CREATE matable AS (SELECT arbuste.fid AS id_arbu, sgt_herbarbo.fid AS id_sgt_t, sgt_herbarbo.strate AS strate_touch, abs(arbuste."_mnhlmedia"-sgt_herbarbo."_mnhlmedia") as diff_h
							FROM (SELECT sgts_veg.* FROM sgts_veg, arbuste_uniq where sgts_veg.fid = arbuste_uniq.fid) AS arbuste, 
								 (SELECT sgts_veg.* FROM sgts_veg WHERE strate in ('arbore', 'herbace')) AS sgt_herbarbo
							WHERE ST_INTERSECTS(arbuste.geom, sgt_herbarbo.geom));

CREATE  TABLE sgt_touch_herbarbo AS
    (SELECT matable.*
    FROM (
        SELECT arbuste.fid as id_arbu,arbuste.geom as geom, sgt_touch.fid as id_sgt_t, sgt_touch.strate as strate_touch, abs(arbuste.mnh-sgt_touch.mnh) as diff_h
        FROM (
            SELECT sgts_veg.*
            FROM sgts_veg, arbu_touch_herb_arbo
            WHERE sgts_veg.fid = arbu_touch_herb_arbo.fid)
        as arbuste, (
                    SELECT sgts_veg.*
                    FROM sgts_veg
                    WHERE strate in ('arbre', 'herbace'))
        as sgt_touch
        WHERE st_intersects(arbuste.geom, sgt_touch.geom))
    as matable
    INNER JOIN
    (SELECT matable.id_arbu as id_arbu, min(matable.diff_h) as min_diff_h
    FROM (
        SELECT arbuste.fid as id_arbu, sgt_touch.fid as id_sgt_t, sgt_touch.strate as strate_touch, abs(arbuste.mnh-sgt_touch.mnh) as diff_h
        FROM (
            SELECT sgts_veg.*
            FROM sgts_veg, arbu_touch_herb_arbo
            WHERE sgts_veg.fid = arbu_touch_herb_arbo.fid)
            as arbuste,
            (
            SELECT sgts_veg.*
            FROM sgts_veg
            WHERE strate in ('arbre', 'herbace'))
            as sgt_touch
        WHERE st_intersects(arbuste.geom, sgt_touch.geom)) as matable
    GROUP BY id_arbu)
    AS t on matable.id_arbu = t.id_arbu AND matable.diff_h = t.min_diff_h)
	

# Reclassification pour chaque segment arbustif isolé en herbacé ou arboré ou arbustif suivant la valeur minimale de différence de hauteur avec le segment le plus proche
UPDATE sgts_veg SET
    strate = sgt_touch_herbarbo.strate_touch
    FROM sgt_touch_herbarbo
    WHERE sgts_veg.fid = sgt_touch_herbarbo.id_arbu and sgt_touch_herbarbo.diff_h <= 1;

##C. Pas de reclassification pour les segments arbustifs seuls entourés uniquement d'herbacé et/ou de vide 

# 2 # Reclassification des segments arbustifs "regroupés"

# Création de la table contenant les segments arbustifs appartennant à des regroupements en contact avec des segments herbacés ET des segments arborés##
CREATE TABLE sgt_rgpt_touch_arbo_herbe AS
    SELECT DISTINCT arbu_de_rgpt.fid, arbu_de_rgpt.geom, arbu_de_rgpt.fid_rgpt_arbu
    FROM arbu_de_rgpt, (SELECT DISTINCT rgpt_arbuste.fid
                            FROM rgpt_arbuste,(SELECT geom FROM sgts_veg WHERE strate = 'arbre') AS arbre, 
								 (SELECT geom FROM sgts_veg WHERE strate = 'herbace') as herbace
                            WHERE ST_INTERSECTS(arbre.geom, rgpt_arbuste.geom) AND ST_INTERSECTS(herbace.geom, rgpt_arbuste.geom)) AS multi_touch
    WHERE arbu_de_rgpt.fid = multi_touch.fid;
	
# Création de la table contenant les arbustes en bordure des regroupements qui touchent d'autres segments arborés et/ou herbacés
CREATE  TABLE sgt_rgpt_bordure AS
    (SELECT matable.*
    FROM (
        SELECT arbuste.fid as id_arbu,arbuste.geom as geom, sgt_touch.fid as id_sgt_t, sgt_touch.strate as strate_touch, abs(arbuste."_mnhpmedia"-sgt_touch."_mnhpmedia") as diff_h
        FROM (
            SELECT sgts_veg.*
            FROM sgts_veg, sgt_rgpt_touch_arbo_herbe
            WHERE sgts_veg.fid = sgt_rgpt_touch_arbo_herbe.fid)
        as arbuste, (
                    SELECT sgts_veg.*
                    FROM sgts_veg
                    WHERE strate in ('arbre', 'herbace'))
        as sgt_touch
        WHERE st_intersects(arbuste.geom, sgt_touch.geom))
    as matable
    INNER JOIN
    (SELECT matable.id_arbu as id_arbu, min(matable.diff_h) as min_diff_h
    FROM (
        SELECT arbuste.fid as id_arbu, sgt_touch.fid as id_sgt_t, sgt_touch.strate as strate_touch, abs(arbuste."_mnhpmedia"-sgt_touch."_mnhpmedia") as diff_h
        FROM (
            SELECT sgts_veg.*
            FROM sgts_veg, sgt_rgpt_touch_arbo_herbe
            WHERE sgts_veg.fid = sgt_rgpt_touch_arbo_herbe.fid)
            as arbuste,
            (
            SELECT sgts_veg.*
            FROM sgts_veg
            WHERE strate in ('arbre', 'herbace'))
            as sgt_touch
        WHERE st_intersects(arbuste.geom, sgt_touch.geom)) as matable
    GROUP BY id_arbu)
    AS t on matable.id_arbu = t.id_arbu AND matable.diff_h = t.min_diff_h)
	
	
# Reclassification des segments situés en bordure de regroupement via le critère de hauteur

UPDATE sgts_veg SET
    strate=sgt_rgpt_bordure.strate_touch
    FROM sgt_rgpt_bordure
    WHERE sgts_veg.fid = sgt_rgpt_bordure.id_arbu and sgt_rgpt_bordure.diff_h <= 1;

(pour savoir comment s'entremêle les requêtes pour les segments arbustifs appartennant à des regroupements --> se référer à testpypostgis.py)

###
#2# Classification des formes végétales horizontales
###


# Création de l'attribut forme végétale "fv"
ALTER TABLE sgts_veg ADD fv varchar(100);

# Suppression de un ou plusieurs attribut(s) qui ne seront pas utiles pour la suite des opérations

ALTER TABLE sgts_veg DROP COLUMN IF EXISTS dn, DROP COLUMN IF EXISTS txt, DROP COLUMN IF EXISTS mnh;

# Division en trois tables correspondants aux trois strates
CREATE TABLE arbore_ini AS (SELECT * FROM sgts_veg WHERE strate = 'arbore');
CREATE TABLE arbustif_ini AS (SELECT * FROM sgts_veg WHERE strate = 'arbustif');
CREATE TABLE herbace_ini AS (SELECT * FROM sgts_veg WHERE strate = 'herbace');

## 1 ## Gestion de la strate arborée

# Regroupement et lissage des segments arborés
CREATE TABLE arbore AS (
	SELECT arbore_ini.fid, arbore_ini.strate, arbore_ini.fv, ST_CHAIKINSMOOTHING((ST_DUMP(ST_MULTI(ST_UNION(arbore_ini.geom)))).geom) AS geom
	FROM arbore_ini 
	GROUP BY arbore_ini.fid, arbore_ini.strate, arbore_ini.fv);

# La table arbore_ini ne nous est plus utile donc on la supprime
DROP TABLE IF EXISTS arbore_ini;

# Creation index spatial
CREATE INDEX idx_arbore ON arbore USING gist(geom);

# Création et calcul de l'indice de géométrie "id_comp" pour la compacité
ALTER TABLE arbore ADD id_comp float;
UPDATE arbore SET id_comp = (4*PI()*ST_AREA(ST_BUFFER(arbore.geom,2)))/(ST_PERIMETER(ST_BUFFER(arbore.geom,2))*ST_PERIMETER(ST_BUFFER(arbore.geom,2)))
						WHERE arbore.id = arbore.id;

# A. Classement en arbore isole/tache arboree/regroupement arbore
NB : les seuils de surface et de compacité correspondront à des paramètres dans le code python du projet
UPDATE arbore SET fv = 'arbre isole' WHERE ST_AREA(arbore.geom) <= 30 AND arbore.id_comp > 0.7;
UPDATE arbore SET fv = 'tache arboree' WHERE ST_AREA(arbore.geom) <= 30 AND arbore.id_comp <= 0.7;
UPDATE arbore SET fv = 'regroupement arbore' WHERE ST_AREA(arbore.geom) > 30;

# B. Récupération parmi les polygones de regroupement arbore, un unique polygone contenant tous les boisements strictes ET les segments arborés aux petites surfaces touchant les boisements strictes 

CREATE TABLE arbore_bststr AS (
	SELECT ST_UNION(sgt_bst_stricte.geom) AS geom
	FROM (SELECT geom 
			FROM (SELECT ST_MAKEVALID((ST_DUMP(ST_DIFFERENCE(arbore.geom, boisement.geom))).geom) AS geom 
					FROM arbore, (SELECT ST_MAKEVALID((ST_DUMP(ST_BUFFER(ST_BUFFER(arbore.geom,-7),7))).geom::geometry(Polygon,2154)) AS geom
										FROM arbore
										WHERE arbore.fv='regroupement arbore') AS boisement
					WHERE arbore.fv = 'regroupement arbore' AND ST_INTERSECTS(arbore.geom, boisement.geom)) AS arbre21 
			WHERE ST_AREA(arbre21.geom)<200) AS sgt_bst_stricte
	UNION 
	(SELECT geom 
		FROM (SELECT ST_MAKEVALID((ST_DUMP(ST_BUFFER(ST_BUFFER(arbore.geom,-7),7))).geom::geometry(Polygon,2154)) AS geom 
				FROM arbore 
				WHERE arbore.fv='regroupement arbore') AS geom) AS geom);
				
				
# Création index spatial
CREATE INDEX idx_arbore_bststr ON arbore_bststr USING gist(geom);

# Séparation des polygones de boisements strictes s'ils ne se touchent pas
CREATE TABLE arbore_bststr_uniq AS (SELECT ST_MAKEVALID((ST_DUMP(geom)).geom::geometry(Polygon,2154)) AS geom FROM arbore_bststr);

# Création index spatial
CREATE INDEX idx_arbore_bststr_uniq ON arbore_bststr_uniq USING gist(geom);

# Ajout de l'attribut "fv"
ALTER TABLE arbore_bststr_uniq ADD COLUMN fv varchar(100);

# Attribution de la valeur unique "boisement arbore" pour toutes les entités de arbore_bststr_uniq
UPDATE arbore_bststr_uniq SET fv='boisement arbore';

# Ajout d'un identifiant unique pour chaque entité
ALTER TABLE arbore_bststr_uniq ADD COLUMN fid SERIAL PRIMARY key;

# C. Récupération des autres polygones de regroupements arborés qui ne sont pas des boisements strictes

CREATE TABLE rgpt_arbore AS
	SELECT ST_MAKEVALID((ST_DUMP(ST_DIFFERENCE(g2.geom, arbore_bststr.geom))).geom::geometry(Polygon,2154)) AS geom 
	FROM (SELECT geom
			FROM arbore 
			WHERE fv = 'regroupement arbore') AS g2, arbore_bststr ;

# Ajout d'un identifiant unique pour chaque entité
ALTER TABLE rgpt_arbore ADD COLUMN fid SERIAL PRIMARY key;
	
# création index spatial
CREATE INDEX idx_rgpt_arbore ON rgpt_arbore USING gist(geom);

# Ajout de l'attribut "fv"
ALTER TABLE rgpt_arbore ADD COLUMNS fv varchar(100);

# D. Classification des polygones de regroupement arborés qui ne sont pas des boisements strictes

# Suppression des géométries trop petites (formes d'artefacts)
DELETE FROM rgpt_arbore WHERE ST_AREA(rgpt_arbore.geom)<=1;

# Calcul des valeurs longueur et largeur des rectangles englobants minimaux des polygones

ALTER TABLE rgpt_arbore ADD x0 float;
ALTER TABLE rgpt_arbore ADD y0 float;
ALTER TABLE rgpt_arbore ADD x1 float;
ALTER TABLE rgpt_arbore ADD y1 float;
ALTER TABLE rgpt_arbore ADD x3 float;
ALTER TABLE rgpt_arbore ADD y3 float;
UPDATE rgpt_arbore SET x0 = cast(split_part(split_part(substring(left(st_astext(st_orientedenvelope(rgpt_arbore.geom)),-2),10),',',1),' ',1) as DECIMAL) WHERE rgpt_arbore.id = rgpt_arbore.id;
UPDATE rgpt_arbore SET y0 = cast(split_part(split_part(substring(left(st_astext(st_orientedenvelope(rgpt_arbore.geom)),-2),10),',',1),' ',2) as DECIMAL) WHERE rgpt_arbore.id = rgpt_arbore.id;
UPDATE rgpt_arbore SET x1 = cast(split_part(split_part(substring(left(st_astext(st_orientedenvelope(rgpt_arbore.geom)),-2),10),',',2),' ',1) as DECIMAL) WHERE rgpt_arbore.id = rgpt_arbore.id;
UPDATE rgpt_arbore SET y1 = cast(split_part(split_part(substring(left(st_astext(st_orientedenvelope(rgpt_arbore.geom)),-2),10),',',2),' ',2) as DECIMAL) WHERE rgpt_arbore.id = rgpt_arbore.id;
UPDATE rgpt_arbore SET x3 = cast(split_part(split_part(substring(left(st_astext(st_orientedenvelope(rgpt_arbore.geom)),-2),10),',',4),' ',1) as DECIMAL) WHERE rgpt_arbore.id = rgpt_arbore.id;
UPDATE rgpt_arbore SET y3 = cast(split_part(split_part(substring(left(st_astext(st_orientedenvelope(rgpt_arbore.geom)),-2),10),',',4),' ',2) as DECIMAL) WHERE rgpt_arbore.id = rgpt_arbore.id;

ALTER TABLE rgpt_arbore ADD largeur float;

UPDATE rgpt_arbore SET largeur= LEAST(sqrt((rgpt_arbore.x1-rgpt_arbore.x0)^2+(rgpt_arbore.y1-rgpt_arbore.y0)^2), sqrt((rgpt_arbore.x3-rgpt_arbore.x0)^2+(rgpt_arbore.y3-rgpt_arbore.y0)^2)) WHERE rgpt_arbore.id = rgpt_arbore.id; 

ALTER table rgpt_arbore ADD longueur float;

UPDATE rgpt_arbore SET longueur= GREATEST(sqrt((rgpt_arbore.x1-rgpt_arbore.x0)^2+(rgpt_arbore.y1-rgpt_arbore.y0)^2), sqrt((rgpt_arbore.x3-rgpt_arbore.x0)^2+(rgpt_arbore.y3-rgpt_arbore.y0)^2)) WHERE rgpt_arbore.id = rgpt_arbore.id; 

# Calcul des indicateurs de forme : elongation, indice de convexité et indice de compacité

ALTER TABLE rgpt_arbore ADD elongation float;
update rgpt_arbore SET elongation = (rgpt_arbore.longueur/rgpt_arbore.largeur) WHERE rgpt_arbore.id = rgpt_arbore.id AND rgpt_arbore.largeur <> 0;

ALTER TABLE rgpt_arbore ADD id_conv float;
update rgpt_arbore SET id_conv = (st_area(rgpt_arbore.geom)/st_area(st_orientedenvelope(rgpt_arbore.geom)))  WHERE rgpt_arbore.id = rgpt_arbore.id AND st_area(st_orientedenvelope(rgpt_arbore.geom)) <> 0;

ALTER TABLE rgpt_arbore ADD id_comp float;
update rgpt_arbore SET id_comp = (4*pi()*st_area(st_buffer(rgpt_arbore.geom,2))/(st_perimeter(st_buffer(rgpt_arbore.geom,2))*st_perimeter(st_buffer(rgpt_arbore.geom,2)))) WHERE rgpt_arbore.id = rgpt_arbore.id AND st_perimeter(st_buffer(rgpt_arbore.geom,2)) <> 0;

# Suppression des attributs inutiles
ALTER TABLE rgpt_arbore DROP COLUMN IF EXISTS x0, DROP COLUMN IF EXISTS y0,DROP COLUMN IF EXISTS x1, DROP COLUMN IF EXISTS y1, DROP COLUMN IF EXISTS x3, DROP COLUMN IF EXISTS y3;

## Classification suivant les surfaces des éléments 

# si la surface est inférieure à 30, que ça ne touche pas un boisement stricte ET que son id_comp >= 0.7 --> arbre isole

UPDATE rgpt_arbore SET fv = 'arbre isole' FROM arbore_bststr_uniq  WHERE  ST_AREA(rgpt_arbore.geom) <= 30 AND rgpt_arbore.id_comp  >= 0.7 AND ST_INTERSECTS(rgpt_arbore.geom, arbore_bststr_uniq.geom) is false;

# si la surface est inférieure à 30, que ça ne touche pas un boisement stricte ET que son id_comp <0.7 --> tâche verte
UPDATE rgpt_arbore SET fv = 'tache arbore' FROM arbore_bststr_uniq WHERE  ST_AREA(rgpt_arbore.geom) <= 30 AND rgpt_arbore.id_comp  < 0.7 AND ST_INTERSECTS(rgpt_arbore.geom, arbore_bststr_uniq.geom) is false;

# si la surface est inférieure à 30 et que ça touche un boisement stricte --> ça appartient au boisement
UPDATE rgpt_arbore SET fv = 'boisement arbore' FROM arbore_bststr_uniq  WHERE  ST_AREA(rgpt_arbore.geom)<= 30 AND ST_INTERSECTS(rgpt_arbore.geom, arbore_bststr_uniq.geom);

# si la surface est supérieure à 30
# --> classification à partir d'indices de formes du reste des polygones appartennant aux regroupements
UPDATE rgpt_arbore SET fv='alignement arbore' WHERE  rgpt_arbore.id_conv >= 0.7 AND rgpt_arbore.elongation  >= 2.5 AND ST_AREA(rgpt_arbore.geom)>30;

UPDATE rgpt_arbore SET fv='boisement arbore' WHERE rgpt_arbore.id_conv >= 0.7 AND rgpt_arbore.elongation< 2.5 AND ST_AREA(rgpt_arbore.geom)>30;

UPDATE rgpt_arbore SET fv='alignement arbore' WHERE rgpt_arbore.id_conv < 0.7 AND rgpt_arbore.id_comp <= 0.5 AND ST_AREA(rgpt_arbore.geom)>30;

UPDATE rgpt_arbore SET fv='boisement arbore' WHERE rgpt_arbore.id_conv < 0.7 AND rgpt_arbore.id_comp > 0.5 AND ST_AREA(rgpt_arbore.geom)>30;

# E. Regroupement de tous les polygones appartennant à la strate arborée 

# Suppression de tous les attributs excepté les colonnes 'fv' et 'geom' des trois tables importantes (arbre2, arbre22 et arbre23)

ALTER TABLE rgpt_arbore DROP COLUMN IF EXISTS id_comp, DROP COLUMNS IF EXISTS id, DROP COLUMN IF EXISTS id_conv, DROP COLUMN IF EXISTS elongation, DROP COLUMN IF EXISTS rectangleenglobant, DROP COLUMN IF EXISTS largeur, DROP COLUMN IF EXISTS longueur;
requête a revoir
# Concatenation de tous les polygones de la strate arborée avec uniquement les colonnes de géometries de fv
CREATE TABLE strate_arboree AS 	
	SELECT strate_arboree.fv as fv, st_makevalid((st_dump(st_union(strate_arboree.geom))).geom::geometry(POLYGON,2154)) as geom 
	FROM ((SELECT ab2.geom, ab2.fv 
			FROM (SELECT geom, fv 
					FROM arbore 
					WHERE fv in ('arbre isole', 'tache arboree')) as ab2) 
			UNION
		  (SELECT geom, fv 
			FROM arbore_bststr_uniq) 
			UNION 
		   (SELECT geom, fv 
			FROM rgpt_arbore)) AS strate_arboree 
	WHERE st_intersects(strate_arboree.geom, strate_arboree.geom) 
	GROUP BY strate_arboree.fv;


ALTER TABLE strate_arboree ADD COLUMN id serial PRIMARY KEY;

ALTER TABLE strate_arboree ADD COLUMN strate varchar(100);
							
UPDATE strate_arboree SET strate='arbore';

CREATE index idx_geom_sarbo ON strate_arboree USING gist(geom);

DROP TABLE IF EXISTS arbore_bststr, IF EXISTS arbore_bststr_uniq, IF EXISTS rgpt_arbore;

## 2 ## Gestion de la strate arbustive

# Regroupement et lissage des segments arborés
CREATE TABLE arbustif AS (
	SELECT arbustif_ini.fid, arbustif_ini.strate, arbustif_ini.fv, ST_CHAIKINSMOOTHING((ST_DUMP(ST_MULTI(ST_UNION(arbustif_ini.geom)))).geom) AS geom
	FROM arbustif_ini 
	GROUP BY arbustif_ini.fid, arbustif_ini.strate, arbustif_ini.fv);

# La table arbustif_ini ne nous est plus utile donc on la supprime
DROP TABLE IF EXISTS arbustif_ini;

# Creation index spatial
CREATE INDEX idx_arbustif ON arbustif USING gist(geom);

# Création et calcul de l'indice de géométrie "id_comp" pour la compacité
ALTER TABLE arbustif ADD id_comp float;
UPDATE arbustif SET id_comp = (4*PI()*ST_AREA(ST_BUFFER(arbustif.geom,2)))/(ST_PERIMETER(ST_BUFFER(arbustif.geom,2))*ST_PERIMETER(ST_BUFFER(arbustif.geom,2)))
						WHERE arbustif.id = arbustif.id;

# A. Classement en arbustif isole/tache arbustif/regroupement arbustif
NB : les seuils de surface et de compacité correspondront à des paramètres dans le code python du projet
UPDATE arbustif SET fv = 'arbuste isole' WHERE ST_AREA(arbustif.geom) <= 30 AND arbustif.id_comp > 0.7;
UPDATE arbustif SET fv = 'tache arbustive' WHERE ST_AREA(arbustif.geom) <= 30 AND arbustif.id_comp <= 0.7;
UPDATE arbustif SET fv = 'regroupement arbustif' WHERE ST_AREA(arbustif.geom) > 30;

# B. Récupération parmi les polygones de regroupement arbustif, un unique polygone contenant tous les boisements strictes ET les segments arborés aux petites surfaces touchant les boisements strictes 

CREATE TABLE arbustif_bststr AS (
	SELECT ST_UNION(sgt_bst_stricte.geom) AS geom
	FROM (SELECT geom 
			FROM (SELECT ST_MAKEVALID((ST_DUMP(ST_DIFFERENCE(arbustif.geom, boisement.geom))).geom) AS geom 
					FROM arbustif, (SELECT ST_MAKEVALID((ST_DUMP(ST_BUFFER(ST_BUFFER(arbustif.geom,-7),7))).geom::geometry(Polygon,2154)) AS geom
										FROM arbustif
										WHERE arbustif.fv='regroupement arbustif') AS boisement
					WHERE arbustif.fv = 'regroupement arbustif' AND ST_INTERSECTS(arbustif.geom, boisement.geom)) AS arbustif21 
			WHERE ST_AREA(arbustif21.geom)<200) AS sgt_bst_stricte
	UNION 
	(SELECT geom 
		FROM (SELECT ST_MAKEVALID((ST_DUMP(ST_BUFFER(ST_BUFFER(arbustif.geom,-7),7))).geom::geometry(Polygon,2154)) AS geom 
				FROM arbustif 
				WHERE arbustif.fv='regroupement arbustif') AS geom) AS geom);
				
				
# Création index spatial
CREATE INDEX idx_arbustif_bststr ON arbustif_bststr USING gist(geom);

# Séparation des polygones de boisements strictes s'ils ne se touchent pas
CREATE TABLE arbustif_bststr_uniq AS (SELECT ST_MAKEVALID((ST_DUMP(geom)).geom::geometry(Polygon,2154)) AS geom FROM arbustif_bststr);

# Création index spatial
CREATE INDEX idx_arbustif_bststr_uniq ON arbustif_bststr_uniq USING gist(geom);

# Ajout de l'attribut "fv"
ALTER TABLE arbustif_bststr_uniq ADD COLUMN fv varchar(100);

# Attribution de la valeur unique "boisement arbustif" pour toutes les entités de arbustif_bststr_uniq
UPDATE arbustif_bststr_uniq SET fv='boisement arbustif';

# Ajout d'un identifiant unique pour chaque entité
ALTER TABLE arbustif_bststr_uniq ADD COLUMN fid SERIAL PRIMARY key;

# C. Récupération des autres polygones de regroupements arborés qui ne sont pas des boisements strictes

CREATE TABLE rgpt_arbustif AS
	SELECT ST_MAKEVALID((ST_DUMP(ST_DIFFERENCE(g2.geom, arbustif_bststr.geom))).geom::geometry(Polygon,2154)) AS geom 
	FROM (SELECT geom
			FROM arbustif 
			WHERE fv = 'regroupement arbustif') AS g2, arbustif_bststr ;

# Ajout d'un identifiant unique pour chaque entité
ALTER TABLE rgpt_arbustif ADD COLUMN fid SERIAL PRIMARY key;
	
# création index spatial
CREATE INDEX idx_rgpt_arbustif ON rgpt_arbustif USING gist(geom);

# Ajout de l'attribut "fv"
ALTER TABLE rgpt_arbustif ADD COLUMNS fv varchar(100);

# D. Classification des polygones de regroupement arborés qui ne sont pas des boisements strictes

# Suppression des géométries trop petites (formes d'artefacts)
DELETE FROM rgpt_arbustif WHERE ST_AREA(rgpt_arbustif.geom)<=1;

# Calcul des valeurs longueur et largeur des rectangles englobants minimaux des polygones

ALTER TABLE rgpt_arbustif ADD x0 float;
ALTER TABLE rgpt_arbustif ADD y0 float;
ALTER TABLE rgpt_arbustif ADD x1 float;
ALTER TABLE rgpt_arbustif ADD y1 float;
ALTER TABLE rgpt_arbustif ADD x3 float;
ALTER TABLE rgpt_arbustif ADD y3 float;
UPDATE rgpt_arbustif SET x0 = cast(split_part(split_part(substring(left(st_astext(st_orientedenvelope(rgpt_arbustif.geom)),-2),10),',',1),' ',1) as DECIMAL) WHERE rgpt_arbustif.id = rgpt_arbustif.id;
UPDATE rgpt_arbustif SET y0 = cast(split_part(split_part(substring(left(st_astext(st_orientedenvelope(rgpt_arbustif.geom)),-2),10),',',1),' ',2) as DECIMAL) WHERE rgpt_arbustif.id = rgpt_arbustif.id;
UPDATE rgpt_arbustif SET x1 = cast(split_part(split_part(substring(left(st_astext(st_orientedenvelope(rgpt_arbustif.geom)),-2),10),',',2),' ',1) as DECIMAL) WHERE rgpt_arbustif.id = rgpt_arbustif.id;
UPDATE rgpt_arbustif SET y1 = cast(split_part(split_part(substring(left(st_astext(st_orientedenvelope(rgpt_arbustif.geom)),-2),10),',',2),' ',2) as DECIMAL) WHERE rgpt_arbustif.id = rgpt_arbustif.id;
UPDATE rgpt_arbustif SET x3 = cast(split_part(split_part(substring(left(st_astext(st_orientedenvelope(rgpt_arbustif.geom)),-2),10),',',4),' ',1) as DECIMAL) WHERE rgpt_arbustif.id = rgpt_arbustif.id;
UPDATE rgpt_arbustif SET y3 = cast(split_part(split_part(substring(left(st_astext(st_orientedenvelope(rgpt_arbustif.geom)),-2),10),',',4),' ',2) as DECIMAL) WHERE rgpt_arbustif.id = rgpt_arbustif.id;

ALTER TABLE rgpt_arbustif ADD largeur float;

UPDATE rgpt_arbustif SET largeur= LEAST(sqrt((rgpt_arbustif.x1-rgpt_arbustif.x0)^2+(rgpt_arbustif.y1-rgpt_arbustif.y0)^2), sqrt((rgpt_arbustif.x3-rgpt_arbustif.x0)^2+(rgpt_arbustif.y3-rgpt_arbustif.y0)^2)) WHERE rgpt_arbustif.id = rgpt_arbustif.id; 

ALTER table rgpt_arbustif ADD longueur float;

UPDATE rgpt_arbustif SET longueur= GREATEST(sqrt((rgpt_arbustif.x1-rgpt_arbustif.x0)^2+(rgpt_arbustif.y1-rgpt_arbustif.y0)^2), sqrt((rgpt_arbustif.x3-rgpt_arbustif.x0)^2+(rgpt_arbustif.y3-rgpt_arbustif.y0)^2)) WHERE rgpt_arbustif.id = rgpt_arbustif.id; 

# Calcul des indicateurs de forme : elongation, indice de convexité et indice de compacité

ALTER TABLE rgpt_arbustif ADD elongation float;
update rgpt_arbustif SET elongation = (rgpt_arbustif.longueur/rgpt_arbustif.largeur) WHERE rgpt_arbustif.id = rgpt_arbustif.id AND rgpt_arbustif.largeur <> 0;

ALTER TABLE rgpt_arbustif ADD id_conv float;
update rgpt_arbustif SET id_conv = (st_area(rgpt_arbustif.geom)/st_area(st_orientedenvelope(rgpt_arbustif.geom)))  WHERE rgpt_arbustif.id = rgpt_arbustif.id AND st_area(st_orientedenvelope(rgpt_arbustif.geom)) <> 0;

ALTER TABLE rgpt_arbustif ADD id_comp float;
update rgpt_arbustif SET id_comp = (4*pi()*st_area(st_buffer(rgpt_arbustif.geom,2))/(st_perimeter(st_buffer(rgpt_arbustif.geom,2))*st_perimeter(st_buffer(rgpt_arbustif.geom,2)))) WHERE rgpt_arbustif.id = rgpt_arbustif.id AND st_perimeter(st_buffer(rgpt_arbustif.geom,2)) <> 0;

# Suppression des attributs inutiles
ALTER TABLE rgpt_arbustif DROP COLUMN IF EXISTS x0, DROP COLUMN IF EXISTS y0,DROP COLUMN IF EXISTS x1, DROP COLUMN IF EXISTS y1, DROP COLUMN IF EXISTS x3, DROP COLUMN IF EXISTS y3;

## Classification suivant les surfaces des éléments 

# si la surface est inférieure à 30, que ça ne touche pas un boisement stricte ET que son id_comp >= 0.7 --> arbre isole

UPDATE rgpt_arbustif SET fv = 'arbre isole' FROM arbustif_bststr_uniq  WHERE  ST_AREA(rgpt_arbustif.geom) <= 30 AND rgpt_arbustif.id_comp  >= 0.7 AND ST_INTERSECTS(rgpt_arbustif.geom, arbustif_bststr_uniq.geom) is false;

# si la surface est inférieure à 30, que ça ne touche pas un boisement stricte ET que son id_comp <0.7 --> tâche verte
UPDATE rgpt_arbustif SET fv = 'tache arbustif' FROM arbustif_bststr_uniq WHERE  ST_AREA(rgpt_arbustif.geom) <= 30 AND rgpt_arbustif.id_comp  < 0.7 AND ST_INTERSECTS(rgpt_arbustif.geom, arbustif_bststr_uniq.geom) is false;

# si la surface est inférieure à 30 et que ça touche un boisement stricte --> ça appartient au boisement
UPDATE rgpt_arbustif SET fv = 'boisement arbustif' FROM arbustif_bststr_uniq  WHERE  ST_AREA(rgpt_arbustif.geom)<= 30 AND ST_INTERSECTS(rgpt_arbustif.geom, arbustif_bststr_uniq.geom);

# si la surface est supérieure à 30
# --> classification à partir d'indices de formes du reste des polygones appartennant aux regroupements
UPDATE rgpt_arbustif SET fv='alignement arbustif' WHERE  rgpt_arbustif.id_conv >= 0.7 AND rgpt_arbustif.elongation  >= 2.5 AND ST_AREA(rgpt_arbustif.geom)>30;

UPDATE rgpt_arbustif SET fv='boisement arbustif' WHERE rgpt_arbustif.id_conv >= 0.7 AND rgpt_arbustif.elongation< 2.5 AND ST_AREA(rgpt_arbustif.geom)>30;

UPDATE rgpt_arbustif SET fv='alignement arbustif' WHERE rgpt_arbustif.id_conv < 0.7 AND rgpt_arbustif.id_comp <= 0.5 AND ST_AREA(rgpt_arbustif.geom)>30;

UPDATE rgpt_arbustif SET fv='boisement arbustif' WHERE rgpt_arbustif.id_conv < 0.7 AND rgpt_arbustif.id_comp > 0.5 AND ST_AREA(rgpt_arbustif.geom)>30;

# E. Regroupement de tous les polygones appartennant à la strate arborée 

# Suppression de tous les attributs excepté les colonnes 'fv' et 'geom' des trois tables importantes (arbre2, arbre22 et arbre23)

ALTER TABLE rgpt_arbustif DROP COLUMN IF EXISTS id_comp, DROP COLUMNS IF EXISTS id, DROP COLUMN IF EXISTS id_conv, DROP COLUMN IF EXISTS elongation, DROP COLUMN IF EXISTS rectangleenglobant, DROP COLUMN IF EXISTS largeur, DROP COLUMN IF EXISTS longueur;
requête a revoir
# Concatenation de tous les polygones de la strate arborée avec uniquement les colonnes de géometries de fv
CREATE TABLE strate_arbustife AS 	
	SELECT strate_arbustife.fv as fv, st_makevalid((st_dump(st_union(strate_arbustife.geom))).geom::geometry(POLYGON,2154)) as geom 
	FROM ((SELECT ab2.geom, ab2.fv 
			FROM (SELECT geom, fv 
					FROM arbustif 
					WHERE fv in ('arbuste isole', 'tache arbustive')) as ab2) 
			UNION
		  (SELECT geom, fv 
			FROM arbustif_bststr_uniq) 
			UNION 
		   (SELECT geom, fv 
			FROM rgpt_arbustif)) AS strate_arbustife 
	WHERE st_intersects(strate_arbustife.geom, strate_arbustife.geom) 
	GROUP BY strate_arbustife.fv;


ALTER TABLE strate_arbustife ADD COLUMN id serial PRIMARY KEY;

ALTER TABLE strate_arbustife ADD COLUMN strate varchar(100);
							
UPDATE strate_arbustife SET strate='arbustif';

CREATE index idx_geom_sarbo ON strate_arbustife USING gist(geom);

DROP TABLE IF EXISTS arbustif_bststr, IF EXISTS arbustif_bststr_uniq, IF EXISTS rgpt_arbustif;
